#! /usr/bin/env python3

import argparse
import yaml
import pathlib
import sys
import subprocess
import collections



class App(object):
    APP_LABEL = "battlestar/app"

    def __init__(self, config, data):
        self.config = config
        self.data = data
        self.label = data.get("commonLabels", {}).get(self.APP_LABEL, "")

    def build(self):
        kustomize = subprocess.run(
            ["kustomize", "build", "--reorder=none", self.config.parent.resolve()],
            stdout=subprocess.PIPE,
            check=True,
        )
        return kustomize.stdout

    def apply(self):
        k = self.build()
        if self.label:
            label_filter = [
                "--prune",
                "-l",
                "%s=%s" % (self.APP_LABEL, self.label),
            ]
        else:
            label_filter = []

        subprocess.run(
            [
                "kubectl",
                "apply",
                "-f",
                "-",
            ]
            + label_filter,
            check=True,
            input=k,
        )
        return k

    def delete(self):
        k = self.build()
        subprocess.run(["kubectl", "delete", "-f", "-"], check=True, input=k)


def parse_kustomize(k):
    with k.open("r") as f:
        data = yaml.load(f, Loader=yaml.Loader)

    return App(k, data)


def main():
    parser = argparse.ArgumentParser(description="Kubernetes application management")
    parser.add_argument("--delete", action="store_true", help="Delete application")
    parser.add_argument("--list", action="store_true", help="List applications")
    parser.add_argument(
        "app", nargs="*", default=[], help="Only operate on specified applications"
    )
    args = parser.parse_args()

    apps = {}

    for k in pathlib.Path(".").glob("*/kustomization.yaml"):
        app = parse_kustomize(k)
        if not app.label:
            continue

        if app.label in apps:
            print(
                "Error: Multiple applications using label '%s': %s and %s"
                % (app.label, apps[app.label].config, app.config)
            )
            return 1

        apps[app.label] = app

    main = parse_kustomize(pathlib.Path("./kustomization.yaml"))

    if args.list:
        for label in sorted(apps.keys()):
            print(label)
    else:
        if args.app:
            for a in args.app:
                if args.delete:
                    apps[a].delete()
                else:
                    apps[a].apply()
        elif args.delete:
            main.delete()
        else:
            main.apply()


if __name__ == "__main__":
    sys.exit(main())
